const API_BASE = 'http://localhost:3001';

export const tasksApi = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
  async getRandomTasks() {
    try {
      console.log('üé¥ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏—è —Å:', `${API_BASE}/api/tasks/random`);
      
      const response = await fetch(`${API_BASE}/api/tasks/random`);
      
      console.log('üì® –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è:', data.tasks?.length || 0);
      
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
      return { 
        success: true, 
        tasks: [
          {
            id: '1',
            title: '–ë–ï–ó–£–ú–ù–´–ô –¢–ê–ù–ö–ò–°–¢',
            description: '–í–∑–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Å—Ç–∏ –±–æ–π –Ω–∞ –∫–∞—Ä—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∫–∞" –Ω–∞ —Ç–∞–Ω–∫–∞—Ö –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞. –ù—É–∂–Ω–æ –æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–±–µ–¥—É.',
            rarity: 'epic',
            reward: 50000
          },
          {
            id: '2',
            title: '–ü–û–°–õ–ï–î–ù–ò–ô –®–ê–ù–°',
            description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ 3 –±–æ—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞–Ω–æ—Å–∏—Ç –Ω–µ –º–µ–Ω–µ–µ 1000 —É—Ä–æ–Ω–∞.',
            rarity: 'rare', 
            reward: 25000
          },
          {
            id: '3',
            title: '–ü–†–û–°–¢–ê–Ø –®–ê–õ–û–°–¢–¨',
            description: '–í—ã–∏–≥—Ä–∞—Ç—å –±–æ–π –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–µ –Ω–µ –≤—ã—à–µ 6 —É—Ä–æ–≤–Ω—è –≤—Å–µ–π –∫–æ–º–∞–Ω–¥–æ–π.',
            rarity: 'common',
            reward: 5000
          }
        ]
      };
    }
  },

  // –í–∑—è—Ç–∏–µ –∑–∞–¥–∞–Ω–∏—è
  async takeTask(teamId, taskId) {
    try {
      console.log('üì• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∑—è—Ç–∏–µ –∑–∞–¥–∞–Ω–∏—è...');
      
      const response = await fetch(`${API_BASE}/api/tasks/take`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ teamId, taskId })
      });

      const data = await response.json();
      console.log('‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∑—è—Ç–∏–µ –∑–∞–¥–∞–Ω–∏—è:', data);
      
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
      return { 
        success: true, 
        message: '–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ! (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)'
      };
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã
  async getTeamData(teamId) {
    try {
      console.log('üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', teamId);
      
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      return {
        success: true,
        team: {
          id: teamId,
          balance: 200000,
          completedTasks: 10,
          freeCancels: 3,
          currentTask: {
            id: 'current-1',
            title: '–ë–ï–ó–£–ú–ù–´–ô –¢–ê–ù–ö–ò–°–¢',
            description: '–í–∑–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Å—Ç–∏ –±–æ–π –Ω–∞ –∫–∞—Ä—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∫–∞" –Ω–∞ —Ç–∞–Ω–∫–∞—Ö –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞. –ù—É–∂–Ω–æ –æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–±–µ–¥—É.',
            rarity: 'epic',
            reward: 50000,
            status: 'active',
            takenAt: '2024-11-23'
          }
        }
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã:', error);
      return { success: false, message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö' };
    }
  },

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
  async completeTask(teamId, taskId) {
    try {
      console.log('‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ:', { teamId, taskId });
      
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
      // –ü–æ–∫–∞ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      return {
        success: true,
        message: '–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
      return { success: false, message: '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è' };
    }
  },

  // –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞–Ω–∏—è
  async cancelTask(teamId, taskId, penalty) {
    try {
      console.log('‚ùå –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ:', { teamId, taskId, penalty });
      
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
      // –ü–æ–∫–∞ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      return {
        success: true,
        message: penalty > 0 
          ? `–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ (—à—Ç—Ä–∞—Ñ ${penalty} —Ä—É–±.)`
          : '–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –æ—Ç–º–µ–Ω–∞)'
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è:', error);
      return { success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è' };
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π
  async getTaskHistory(teamId) {
    try {
      console.log('üìú –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞–Ω–∏–π:', teamId);
      
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      return {
        success: true,
        history: [
          {
            id: 'h1',
            title: '–°–ù–ê–ô–ü–ï–†–°–ö–ê–Ø –î–£–≠–õ–¨',
            reward: 25000,
            status: 'completed',
            completedAt: '2024-11-20'
          },
          {
            id: 'h2', 
            title: '–¢–ê–ù–ö–û–í–´–ô –ú–ê–†–ê–§–û–ù',
            reward: 50000,
            status: 'completed',
            completedAt: '2024-11-18'
          }
        ]
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
      return { success: false, message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏' };
    }
  }
};